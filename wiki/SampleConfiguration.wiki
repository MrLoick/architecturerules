#summary sample xml configuration file
#labels sample,configuration,Featured,Phase-Implementation

= Introduction =

Here is an example. Read on for the break down.


{{{
<?xml version="1.0"?>

<architecture>

  <configuration>

        <sources no-packages="ignore">
            <source not-found="ignore">core/target/classes</source>
            <source not-found="ignore">util/target/classes</source>
            <source not-found="exception">parent-pom/target/classes</source>
            <source not-found="ignore">web/target/classes</source>
        </sources>

        <cyclicalDependency test="true"/>

    </configuration>


    <rules>

        <rule>
            <id>dao</id>
            <package>com.nereson.pagerank.core.dao</package>
            <violations>
                <violation>com.nereson.pagerank.core.services</violation>
                <violation>com.nereson.pagerank.core.builder</violation>
                <violation>com.nereson.pagerank.util</violation>
            </violations>
            <comment>The dao interface package should rely on nothing.</comment>
        </rule>

        <rule>
            <id>strategy</id>
            <package>com.nereson.pagerank.core.strategies</package>
            <violations>
                <violation>com.nereson.pagerank.core.services</violation>
                <violation>com.nereson.pagerank.core.dao.hibernate</violation>
            </violations>
            <comment>strategies should be as pluggable as possible</comment>
        </rule>

        <rule>
            <id>model</id>
            <package>com.nereson.pagerank.core.model</package>
            <violations>
                <violation>com.nereson.pagerank.core.dao</violation>
                <violation>com.nereson.pagerank.core.dao.hibernate</violation>
                <violation>com.nereson.pagerank.core.services</violation>
                <violation>com.nereson.pagerank.core.strategy</violation>
                <violation>com.nereson.pagerank.core.builder</violation>
                <violation>com.nereson.pagerank.util</violation>
            </violations>
            <comment>model should remain competely isolated</comment>
        </rule>

    </rules>

</architecture>
}}}


= Breakdown =

== Configuration ==

=== Sources ===

{{{
<sources no-packages="ignore">
    <source not-found="ignore">core/target/classes</source>
    <source not-found="ignore">util/target/classes</source>
    <source not-found="exception">parent-pom/target/classes</source>
    <source not-found="ignore">web/target/classes</source>
</sources>
}}}

Sources are the directories that JDepend will analyze. The Jdepend docs call these sources, but in reality you want to point to your complied classes.

`<sources no-packages="ignore">` 

Valid `no-packages` values are `ignore` and `exception`.

  * _ignore_ will continue on when the source directory does not exist
  * _exception_ will throw a `SourceNotFoundException` when the directory does not exit.

`<source not-found="ignore">core/target/classes</source>`

Sources can be a relative path or an absolute path. Valid `not-found` values are `ignore` and `exception`.

  * _ignore_ will continue when no packages exist, but nothing will be tested. *Not recommended.*
  * _exception_ will throw a `RuntimeException: No packages found` when no packages are found in the given sources.

=== Cyclic Dependency Test ===

{{{
<cyclicalDependency test="true"/>
}}}

Easy as `true` or `false` to indicate weather you want this test to run or not. When this test runs and fails, a `CyclicRedundencyException` is thrown.


== Rules ==

Rules define a `package`, and then go on to list each package that would be considered a `violation` to depend on. An `id` is used to refer to the rule when something goes wrong, and a `comment` may be entered in order to document the rule for future developers (or even for yourself for that matter)

{{{
<rule>
    <id>dao</id>
    <package>com.nereson.pagerank.core.dao</package>
    <violations>
        <violation>com.nereson.pagerank.core.services</violation>
        <violation>com.nereson.pagerank.core.builder</violation>
        <violation>com.nereson.pagerank.util</violation>
    </violations>
    <comment>The dao interface package should rely on nothing.</comment>
</rule>
}}}

`id`s can not be duplicated, but `package`s can. If you want to break up violations for the same package you can do that.

You can not add a `violation` that is identical to the `package`. This is because, in reality, if you have a class that uses a class in the same package, no imports are defined, and therefor this situation can not be tested. If you try this, you will get an `IllegalRuleException`

= Conclusion = 

Thats all there is to it. You can define as many `rules` as you would like, and `cyclicalDependency`  is not required at all.


